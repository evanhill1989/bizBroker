generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                  String    @id @unique
  email               String    @unique
  firstName           String?
  lastName            String?
  profileImage        String?
  createdAt           DateTime  @default(now())
  onboardingCompleted Boolean   @default(false)
  buyerProfile        Buyer?    @relation("BuyerProfile")
  Listing             Listing[]
  Post                Post[]
  sellerProfile       Seller?   @relation("SellerProfile")
}

model Buyer {
  id                String    @id @unique @default(uuid())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  userId            String    @unique
  onboardingStep    String    @default("intro")
  onboardingSkipped Boolean   @default(false)
  user              User      @relation("BuyerProfile", fields: [userId], references: [id])
  inquiries         Inquiry[]

  listingPreferences BuyerListingPreference[]

  scale         String?
  maturity      String?
  businessModel String?
  location      String?

  minPriceRange Float?
  maxPriceRange Float?

  minProfitMultiple Float?
  maxProfitMultiple Float?

  minRevenueMultiple Float?
  maxRevenueMultiple Float?

  minTrailing12MonthProfit Float?
  maxTrailing12MonthProfit Float?

  minTrailing12MonthRevenue Float?
  maxTrailing12MonthRevenue Float?
}

model BuyerListingPreference {
  id        String           @id @default(uuid())
  buyerId   String
  listingId String
  status    PreferenceStatus

  buyer   Buyer   @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@unique([buyerId, listingId]) // Ensures a buyer can only have one preference per listing
}

enum PreferenceStatus {
  LIKED
  HIDDEN
}

model Seller {
  id          String    @id @unique @default(uuid())
  companyName String
  phoneNumber String
  website     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String    @unique
  Inquiry     Inquiry[]
  listings    Listing[]
  user        User      @relation("SellerProfile", fields: [userId], references: [id])
}

model Listing {
  id                     String                   @id @default(uuid())
  name                   String
  description            String
  shortDescription       String?
  longDescription        String?
  subdirectory           String                   @unique
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  imageUrl               String?
  userId                 String?
  sellerId               String?
  businessModel          String
  scale                  String?
  maturity               String
  location               String
  foundedDate            DateTime?
  numEmployees           Int?
  competitors            String[]
  growthOpportunities    String[]
  assets                 String[]
  sellingReason          String?
  financing              String?
  price                  Float?
  profitMultiple         Float?
  revenueMultiple        Float?
  trailing12MonthProfit  Float?
  trailing12MonthRevenue Float?
  lastMonthRevenue       Float?
  lastMonthProfit        Float?
  Seller                 Seller?                  @relation(fields: [sellerId], references: [id])
  User                   User?                    @relation(fields: [userId], references: [id])
  posts                  Post[]
  BuyerListingPreference BuyerListingPreference[]
}

model Post {
  id               String   @id @default(uuid())
  title            String
  articleContent   Json
  smallDescription String
  image            String
  slug             String   @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now())
  userId           String?
  listingId        String?
  Listing          Listing? @relation(fields: [listingId], references: [id], onDelete: Cascade)
  User             User?    @relation(fields: [userId], references: [id])
}

model Inquiry {
  id        String   @id @unique @default(uuid())
  message   String
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  buyerId   String
  sellerId  String
  buyer     Buyer    @relation(fields: [buyerId], references: [id])
  seller    Seller   @relation(fields: [sellerId], references: [id])
}
