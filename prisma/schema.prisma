generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                  String   @id @unique
  email               String   @unique
  firstName           String?
  lastName            String?
  profileImage        String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @default(now()) @updatedAt
  // Buyer fields
  buyerOnboardingStep String   @default("intro")

  buyerListingPreferences        BuyerListingPreference[]
  buyerScale                     String?
  buyerMaturity                  String?
  buyerBusinessModel             String?
  buyerLocation                  String?
  buyerMinPriceRange             Float?
  buyerMaxPriceRange             Float?
  buyerMinProfitMultiple         Float?
  buyerMaxProfitMultiple         Float?
  buyerMinRevenueMultiple        Float?
  buyerMaxRevenueMultiple        Float?
  buyerMinTrailing12MonthProfit  Float?
  buyerMaxTrailing12MonthProfit  Float?
  buyerMinTrailing12MonthRevenue Float?
  buyerMaxTrailing12MonthRevenue Float?

  // Seller fields
  sellerBusinessNames  String[]
  sellerOnboardingStep String   @default("intro")

  sellerPhoneNumber String?
  sellerWebsite     String?
  sellerListings    Listing[] @relation("UserListings") // Specify relation name

  // Relationships
  Inquiry Inquiry[]
  Post    Post[]
}

model Listing {
  id                     String    @id @default(uuid())
  businessName           String
  description            String
  shortDescription       String?
  longDescription        String?
  subdirectory           String    @unique
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  imageUrl               String?
  userId                 String
  businessModel          String
  scale                  String?
  maturity               String
  location               String
  foundedDate            DateTime?
  numEmployees           Int?
  competitors            String[]
  growthOpportunities    String[]
  assets                 String[]
  sellingReason          String?
  financing              String?
  price                  Float?
  profitMultiple         Float?
  revenueMultiple        Float?
  trailing12MonthProfit  Float?
  trailing12MonthRevenue Float?
  lastMonthRevenue       Float?
  lastMonthProfit        Float?

  listingOnboardingStep String @default("intro")

  posts                  Post[]
  BuyerListingPreference BuyerListingPreference[]

  User User @relation(fields: [userId], references: [id], name: "UserListings")
}

model BuyerListingPreference {
  id        String           @id @default(uuid())
  userId    String
  listingId String
  status    PreferenceStatus

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@unique([userId, listingId]) // Ensures a user can only have one preference per listing
}

enum PreferenceStatus {
  LIKED
  HIDDEN
}

model Post {
  id               String   @id @default(uuid())
  title            String
  articleContent   Json
  smallDescription String
  image            String
  slug             String   @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now())
  userId           String?
  listingId        String?
  Listing          Listing? @relation(fields: [listingId], references: [id], onDelete: Cascade)
  User             User?    @relation(fields: [userId], references: [id])
}

model Inquiry {
  id        String   @id @unique @default(uuid())
  message   String
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}
