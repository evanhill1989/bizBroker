// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String  @id @unique
  email        String  @unique
  firstName    String?
  lastName     String?
  profileImage String?

  createdAt           DateTime @default(now())
  onboardingCompleted Boolean  @default(false)

  // Relationships
  buyerProfile  Buyer?    @relation("BuyerProfile")
  sellerProfile Seller?   @relation("SellerProfile")
  Listing       Listing[]
  Post          Post[]
}

model Buyer {
  id             String       @id @unique @default(uuid())
  onboardingStep Int          @default(1) // Track current step
  preferences    Preference[] // Array of embedded preference objects
  inquiries      Inquiry[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  // Back-reference to User
  user   User   @relation("BuyerProfile", fields: [userId], references: [id])
  userId String @unique
}

model Preference {
  id      String @id @default(uuid())
  type    String
  value   String
  buyer   Buyer  @relation(fields: [buyerId], references: [id])
  buyerId String
}

model Seller {
  id          String    @id @unique @default(uuid())
  companyName String
  phoneNumber String
  website     String?
  listings    Listing[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Back-reference to User
  user    User      @relation("SellerProfile", fields: [userId], references: [id])
  userId  String    @unique
  Inquiry Inquiry[]
}

model Inquiry {
  id        String   @id @unique @default(uuid())
  message   String // Message from the buyer to the seller
  status    String   @default("pending") // e.g., "pending", "accepted", "declined"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  buyerId String
  buyer   Buyer  @relation(fields: [buyerId], references: [id])

  sellerId String
  seller   Seller @relation(fields: [sellerId], references: [id])
}

model Listing {
  id           String   @id @default(uuid())
  name         String
  description  String
  subdirectory String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  imageUrl String?
  User     User?   @relation(fields: [userId], references: [id])
  userId   String?
  posts    Post[]
  Seller   Seller? @relation(fields: [sellerId], references: [id])
  sellerId String?
}

model Post {
  id String @id @default(uuid())

  title            String
  articleContent   Json
  smallDescription String
  image            String
  slug             String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
  Listing   Listing? @relation(fields: [listingId], references: [id], onDelete: Cascade)
  listingId String?
}
